#include "totvs.ch"
#include "tlpp-rest.th"
#include "fw-tlpp-core.th"
#include "msobject.ch"
#include "tlpp-object.th"

namespace controller

@annotation PSGuard
    name as char
@end

@annotation PSController
	name as char
@end

@PSController('Clientes')
Class CustomerController
	private data service as object

	public Method  New()   CONSTRUCTOR

	@PSGuard("Visualizar Cliente")
	@Get("/api/v1/customer")
	public Method getCustomers()

	@PSGuard("Visualizar Cliente")
	@Get("/api/v1/customer/:id")
	public Method getCustomerById()

	@PSGuard("Visualizar Cliente")
	@Post("/api/v1/customer")
	public Method create()

	@PSGuard("Atualizar Cliente")
	@Put("/api/v1/customer/:id")
	public Method update()

	@PSGuard("Excluir Cliente")
	@Delete("/api/v1/customer/:id")
	public Method delete()

EndClass

Method New() Class CustomerController
	self:service = CustomerService():New()
Return

Method getCustomers() Class CustomerController
	Local   aJson           := {} as array
	Local   aCustomerDTO    as array
	Local   jResponse       as json


	//teste branch feature
	oRest:setKeyHeaderResponse("Content-Type", "application/json")

	aCustomerDTO := self:service:getCustomers()

	If ! Empty(aCustomerDTO)
		aEval(aCustomerDTO,{|x | aAdd(aJson,x:toJson())})
		jResponse := JsonObject():New()
		jResponse:set(aJson)
		oRest:setResponse(jResponse)
	Else
		oRest:setStatusCode(204)
	Endif
Return

Method getCustomerById() Class CustomerController
	Local   oCustomerDTO    as object

	oRest:setKeyHeaderResponse("Content-Type", "application/json")

	oCustomerDTO := self:service:getCustomerById(oRest:getPathParamsRequest()['id'])

	If oCustomerDTO <> nil
		oRest:setStatusCode(200)
		oRest:setResponse(oCustomerDTO:toJson())
	Else
		oRest:setStatusCode(204)
	EndIf
Return

Method create() Class CustomerController
	Local   oCustomerDTO   as object

	oRest:setKeyHeaderResponse("Content-Type", "application/json")

	oCustomerDTO := self:service:create(CustomerDTO():fromJson(oRest:getBodyRequest()))

	If oCustomerDTO <> nil
		oRest:setStatusCode(201)
	Else
		oRest:setStatusCode(400)
	EndIf

Return

Method update() Class CustomerController
	Local   oCustomerDTO   as object

	oRest:setKeyHeaderResponse("Content-Type", "application/json")
	oCustomerDTO := self:service:update(oRest:getPathParamsRequest()['id'],CustomerDTO():fromJson(oRest:getBodyRequest()))

	If oCustomerDTO <> nil
		oRest:setStatusCode(200)
	Else
		oRest:setStatusCode(400)
	EndIf
Return

Method delete() Class CustomerController
	Local   lOk as logical

	lOk := self:service:delete(oRest:getPathParamsRequest()['id'])

	If lOk
		oRest:setStatusCode(200)
	Else
		oRest:setStatusCode(400)
	EndIf
Return

User Function PSTEST()
	Local aControllers := {} as array 

	lRet := Reflection.isAnnotationObjectPresent( CustomerController():New(),"PSController")


	Conout("chegou aqui")

    If ! Empty(aControllers)

    EndIf

Return aControllers


